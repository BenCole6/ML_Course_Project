strip.background = element_rect(fill = "aliceblue",
colour = NA))
price_trans <- mutate(advertising_train,
"ln_price1" = log(price1),
"ln_price2" = log(price2),
"ln_price3" = log(price3))
p_price1_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price1, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
p_price2_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price2, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
p_price3_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price3, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
price_vars_title <- textGrob("Logarithmic Transformed Price Features",
gp = gpar(fontface = "bold"))
grid.arrange(price_vars_title,
p_price1_trans, p_price2_trans,
p_price3_trans,
layout_matrix = matrix(c(1,
2,
2,
2,
3,
3,
3,
4,
4,
4),
ncol = 1,
byrow = T))
boxcox <- function (x, lambda = 1) {
(x^(lambda) - 1) /
(lambda)
}
box_grobs <- list()
for (i in 1:length(seq(0.025, 0.3, 0.025))) {
j <- seq(0.025, 0.3, 0.025)[i]
boxcox_price <- mutate(advertising_train,
"bc_price1" = boxcox(x = price1,
lambda = j),
"bc_price2" = boxcox(x = price2,
lambda = j),
"bc_price3" = boxcox(x = price3,
lambda = j))
box_grobs[[i]] <- ggplot(boxcox_price) +
geom_density(aes(x = bc_price1, fill = deviceType),
alpha = 1/3) +
ggtitle(paste("Lambda = ", j)) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}
box_grobs_title <- textGrob("Box Cox Transformations of \`price1\` at differing lambda values",
gp = gpar(fontface = "bold"))
do.call(grid.arrange,
box_grobs)
# do.call(what = grid.arrange,
#         args = c(list(textGrob("test"),
#                       ncol = 3,
#                       layout_matrix = matrix(c(1,1,1,
#                                                2,3,4,
#                                                2,3,4),
#                                              byrow = T)),
#                  box_grobs))
box_grobs_arrange <- do.call(grid.arrange,
box_grobs)
grid.arrange(box_grobs_title,
box_grobs_arrange,
layout_matrix = matrix(c(1,2,2,2,2,2,2),
byrow = T))
grid.arrange(box_grobs_title,
box_grobs_arrange,
layout_matrix = matrix(c(1,2,2,2,2,2,2,
2,2,2,2,2,2,
2,2,2,2,2,2),
byrow = T))
boxcox <- function(x, lambda = 1) {
(x^(lambda) - 1 /
(lambda))
}
box_grobs_2 <- list()
box_grobs_higher <- list()
for (i in 1:length(seq(0.025, 0.3, 0.025))) {
j <- seq(0.025, 0.3, 0.025)[i]
boxcox_price <- mutate(advertising_train,
"bc_price1" = boxcox(x = price1,
lambda = j),
"bc_price2" = boxcox(x = price2,
lambda = j),
"bc_price3" = boxcox(x = price3,
lambda = j))
bc_colnames <- colnames(boxcox_price)[str_detect(colnames(boxcox_price), "bc_price")]
for (k in bc_colnames) {
m <- which(bc_colnames %in% k)
box_grobs_2[[m]] <- ggplot(select(boxcox_price,
k, deviceType)) +
geom_density(aes(x = .data[[k]], fill = deviceType),
alpha = 1/3) +
labs(title = paste("Lambda = ", j)) +
ylab("Density") + xlab(k) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}
box_grobs_higher[[i]] <- box_grobs_2
}
library(pacman)                         ## for loading multiple packages
suppressMessages(p_load(character.only = T,
install = F,
c("tidyverse",  ## thanks Hadley
"lubridate",  ## for handling dates
"forcats",    ## for categorial variables, not for felines
"zoo",        ## some data cleaning capabilities
"lemon",      ## add ons for ggplot
"rvest",      ## scraping web pages
"knitr",      ## knitting to RMarkdown
"kableExtra", ## add ons for knitr tables
"scales",     ## quick and easy formatting prettynums
"grid",       ## for stacking ggplots
"gridExtra",  ## also for stacking ggplots
"e1071",      ## for skew and kurtosis
"janitor",    ## cleaning colnames
"beepr")))    ## plays a beep tone
advertising_train <- read_csv("advertising_train.csv")
sample_adv <- sample_n(advertising_train, 20)
kable_styling(kable(sample_adv[ , 1:(ncol(sample_adv)/2)],
caption = "Sample of Advertising Data Frame"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
kable_styling(kable(sample_adv[ , c(1, ((ncol(sample_adv)/2)+1):ncol(sample_adv))],
caption = "Sample of Advertising Data Frame (cont)"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
advertising_train$companyId <- as.factor(advertising_train$companyId)
advertising_train$countryId <- as.factor(advertising_train$countryId)
advertising_train$deviceType <- as.factor(advertising_train$deviceType)
advertising_train$dow <- as.factor(advertising_train$dow)
sapply(advertising_train, class)
advertising_train_long_num <- select(advertising_train,
colnames(advertising_train),
-case_id, -countryId,
-companyId, -deviceType,
-dow)
advertising_train_long_num <- gather(advertising_train_long_num,
key = "Variable",
value = "Value")
summary_adv_num <- summarise(group_by(advertising_train_long_num,
Variable),
"Mean" = mean(Value, na.rm = T),
"Std Dev" = sd(Value, na.rm = T),
"Min" = min(Value, na.rm = T),
"Q1" = quantile(Value, 0.25, na.rm = T),
"Median" = median(Value, na.rm = T),
"Q3" = quantile(Value, 0.75, na.rm = T),
"Max" = max(Value, na.rm = T),
"Number of NA" = sum(is.na(Value)))
kable_styling(kable(summary_adv_num,
digits = 3, format.args = list(nsmall = 3,
scientific = F,
big.mark = ","),
caption = "Summary Statistics of Numeric Variables"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
advertising_train_long_cat <- select(advertising_train,
countryId,
companyId, deviceType,
dow)
advertising_train_long_cat <- gather(advertising_train_long_cat,
key = "Variable",
value = "Value")
advertising_train_long_cat$Variable <- as.factor(advertising_train_long_cat$Variable)
advertising_train_long_cat$Value <- as.factor(advertising_train_long_cat$Value)
ggplot(advertising_train_long_cat) +
geom_bar(aes(x = fct_infreq(Value),
fill = Variable),
show.legend = F, alpha = 2/3) +
facet_rep_wrap(~Variable,
repeat.tick.labels = T,
scales = "free") +
scale_y_continuous(labels = comma,
expand = c(0.01, 0),
"Count") +
scale_x_discrete("Factor Value") +
scale_fill_manual(values = c("blue4", "red3", "cyan3", "yellow3")) +
labs(title = "Frequencies of each Value for each Categorical Variable") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
country_labels <- levels(fct_infreq(advertising_train$countryId))[c(seq(1,
length(levels(fct_infreq(advertising_train$countryId))),
ceiling(length(levels(fct_infreq(advertising_train$countryId)))/10)))]
ggplot(advertising_train) +
geom_bar(aes(x = fct_infreq(countryId)),
fill = "red3", alpha = 2/3) +
scale_y_continuous(labels = comma,
expand = c(0.01, 0),
"Count") +
scale_x_discrete(breaks = country_labels,
"countryId") +
labs(title = "Frequency of observations for each \`countryId\`",
subtitle = "(a categorical variable)",
caption = "labels along x-axis are ID numbers and not numeric/double/ordinal/etc") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplot(advertising_train_long_num) +
geom_density(aes(x = Value),
fill = "yellow",
alpha = 1/3) +
facet_rep_wrap(~Variable,
repeat.tick.labels = T,
scales = "free",
ncol = 3) +
scale_y_continuous(labels = comma_format(accuracy = 0.1)) +
labs(title = "Density Plots of each Numeric Variable",
subtitle = "No transformations",
x = "Variable",
y = "Density")+
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
ggplot(advertising_train_long_num) +
geom_density(aes(x = log(Value)),
fill = "yellow",
alpha = 1/3) +
facet_rep_wrap(~Variable,
repeat.tick.labels = T,
scales = "free",
ncol = 3) +
scale_y_continuous(labels = comma_format(accuracy = 0.1)) +
labs(title = "Density Plots of each Numeric Variable",
subtitle = "After applying natural logarithmic transformation",
x = "ln of Variable",
y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
advertising_train <- mutate(advertising_train,
"ln_cpc" = log(cpc),
"ln_ctr" = log(ctr),
"ln_impr" = log(impression),
"ln_req" = log(requests),
"ln_y" = log(y))
sample_adv <- sample_n(advertising_train, 20)
kable_styling(kable(sample_adv[ , 1 : floor(ncol(sample_adv)/2) ],
format.args = list(digits = 3),
caption = "Sample of advertising\\_train Data Frame After Logarithmic Transformations"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
kable_styling(kable(sample_adv[ , c(1, seq(from = floor(ncol(sample_adv)/2)+1,
to = ncol(sample_adv),
by = 1))],
format.args = list(digits = 3),
caption = "Sample of advertising\\_train Data Frame After Logarithmic Transformations (cont)"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
finite_cpc <- filter(advertising_train,
is.finite(ln_cpc))
p_cpc <- ggplot(finite_cpc) +
geom_density(aes(x = ln_cpc),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_cpc$ln_cpc),
sd(finite_cpc$ln_cpc))) +
geom_vline(xintercept = mean(finite_cpc$ln_cpc),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_ctr <- filter(advertising_train,
is.finite(ln_ctr))
p_ctr <- ggplot(finite_ctr) +
geom_density(aes(x = ln_ctr),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_ctr$ln_ctr),
sd(finite_ctr$ln_ctr))) +
geom_vline(xintercept = mean(finite_cpc$ln_ctr),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_impr <- filter(advertising_train,
is.finite(ln_impr))
p_impr <- ggplot(finite_impr) +
geom_density(aes(x = ln_impr),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_impr$ln_impr),
sd(finite_impr$ln_impr))) +
geom_vline(xintercept = mean(finite_cpc$ln_impr),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_req <- filter(advertising_train,
is.finite(ln_req))
p_req <- ggplot(finite_req) +
geom_density(aes(x = ln_req),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_req$ln_req),
sd(finite_req$ln_req))) +
geom_vline(xintercept = mean(finite_cpc$ln_req),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_y <- filter(advertising_train,
is.finite(ln_y))
p_y <- ggplot(finite_y) +
geom_density(aes(x = ln_y),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_y$ln_y),
sd(finite_y$ln_y))) +
geom_vline(xintercept = mean(finite_cpc$ln_y),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ln_vars_title <- textGrob("Logarithmic Transformed Features and Comparison to Normal Curve",
gp = gpar(fontface = "bold"))
grid.arrange(top = ln_vars_title,
p_cpc, p_ctr,
p_impr, p_req,
p_y,
layout_matrix = matrix(c(1,1,2,2,
3,3,4,4,
NA,5,5,NA),
ncol = 4,
byrow = T))
ggplot(advertising_train) +
geom_density(aes(x = ln_ctr, fill = companyId),
alpha = 1/3) +
labs(title = "Density Plots for Logarithmic Transformed \`ctr\`",
subtitle = "Grouped by \`companyId\`",
y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplot(advertising_train) +
geom_density(aes(x = ln_ctr, fill = companyId),
alpha = 1/3) +
facet_rep_wrap(~deviceType) +
labs(title = "Density Plots for Logarithmic Transformed \`ctr\` and each \`companyId\`",
subtitle = "Facetted by \`deviceType\`",
y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
ggplot(advertising_train) +
geom_density(aes(x = ln_cpc, fill = companyId),
alpha = 1/2) +
labs(title = "Density Plots of \`ln_cpc\`",
subtitle = "Grouped by \`companyId\`",
ylab = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplot(advertising_train) +
geom_density(aes(x = ln_cpc, fill = companyId),
alpha = 1/2) +
facet_rep_wrap(~deviceType) +
labs(title = "Density Plots of \`ln_cpc\` for each \`companyId\`",
subtitle = "Facetted by \`deviceType\`",
ylab = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
price_trans <- mutate(advertising_train,
"ln_price1" = log(price1),
"ln_price2" = log(price2),
"ln_price3" = log(price3))
p_price1_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price1, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
p_price2_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price2, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
p_price3_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price3, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
price_vars_title <- textGrob("Logarithmic Transformed Price Features",
gp = gpar(fontface = "bold"))
grid.arrange(price_vars_title,
p_price1_trans, p_price2_trans,
p_price3_trans,
layout_matrix = matrix(c(1,
2,
2,
2,
3,
3,
3,
4,
4,
4),
ncol = 1,
byrow = T))
for (i in 1:length(seq(0.025, 0.3, 0.025))) {
j <- seq(0.025, 0.3, 0.025)[i]
boxcox_price <- mutate(advertising_train,
"bc_price1" = boxcox(x = price1,
lambda = j),
"bc_price2" = boxcox(x = price2,
lambda = j),
"bc_price3" = boxcox(x = price3,
lambda = j))
bc_colnames <- colnames(boxcox_price)[str_detect(colnames(boxcox_price), "bc_price")]
for (k in bc_colnames) {
m <- which(bc_colnames %in% k)
box_grobs_2[[m]] <- ggplot(select(boxcox_price,
k, deviceType)) +
geom_density(aes(x = .data[[k]], fill = deviceType),
alpha = 1/3) +
labs(title = paste("Lambda = ", j)) +
ylab("Density") + xlab(k) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}
box_grobs_higher[[i]] <- box_grobs_2
}
density_by_lambda <- list()
for (i in 1:12) {
density_by_lambda[[i]] <-  do.call(what = grid.arrange,
args = list(grobs = box_grobs_higher[[i]],
nrow = 1))
}
boxcox <- function(x, lambda = 1) {
(x^(lambda) - 1 /
(lambda))
}
box_grobs_2 <- list()
box_grobs_higher <- list()
for (i in 1:length(seq(0.025, 0.3, 0.025))) {
j <- seq(0.025, 0.3, 0.025)[i]
boxcox_price <- mutate(advertising_train,
"bc_price1" = boxcox(x = price1,
lambda = j),
"bc_price2" = boxcox(x = price2,
lambda = j),
"bc_price3" = boxcox(x = price3,
lambda = j))
bc_colnames <- colnames(boxcox_price)[str_detect(colnames(boxcox_price), "bc_price")]
for (k in bc_colnames) {
m <- which(bc_colnames %in% k)
box_grobs_2[[m]] <- ggplot(select(boxcox_price,
k, deviceType)) +
geom_density(aes(x = .data[[k]], fill = deviceType),
alpha = 1/3) +
labs(title = paste("Lambda = ", j)) +
ylab("Density") + xlab(k) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}
box_grobs_higher[[i]] <- box_grobs_2
}
density_by_lambda <- list()
for (i in 1:12) {
density_by_lambda[[i]] <-  do.call(what = grid.arrange,
args = list(grobs = box_grobs_higher[[i]],
nrow = 1))
}
