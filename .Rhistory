y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
advertising_train <- mutate(advertising_train,
"ln_cpc" = log(cpc + 0.005),
"ln_ctr" = log(ctr + 0.005),
"ln_impr" = log(impression + 0.005),
"ln_req" = log(requests + 0.005),
"ln_y" = log(y + 0.005))
sample_adv <- sample_n(advertising_train, 20)
kable_styling(kable(sample_adv[ , 1 : floor(ncol(sample_adv)/2) ],
format.args = list(digits = 3),
caption = "Sample of advertising\\_train Data Frame After Logarithmic Transformations"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
kable_styling(kable(sample_adv[ , c(1, seq(from = floor(ncol(sample_adv)/2)+1,
to = ncol(sample_adv),
by = 1))],
format.args = list(digits = 3),
caption = "Sample of advertising\\_train Data Frame After Logarithmic Transformations (cont)"),
font_size = 8.5, latex_options = c("striped"),
full_width = F)
finite_cpc <- filter(advertising_train,
is.finite(ln_cpc))
p_cpc <- ggplot(finite_cpc) +
geom_density(aes(x = ln_cpc),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_cpc$ln_cpc),
sd(finite_cpc$ln_cpc))) +
geom_vline(xintercept = mean(finite_cpc$ln_cpc),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_ctr <- filter(advertising_train,
is.finite(ln_ctr))
p_ctr <- ggplot(finite_ctr) +
geom_density(aes(x = ln_ctr),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_ctr$ln_ctr),
sd(finite_ctr$ln_ctr))) +
geom_vline(xintercept = mean(finite_ctr$ln_ctr),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_impr <- filter(advertising_train,
is.finite(ln_impr))
p_impr <- ggplot(finite_impr) +
geom_density(aes(x = ln_impr),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_impr$ln_impr),
sd(finite_impr$ln_impr))) +
geom_vline(xintercept = mean(finite_cpc$ln_impr),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_req <- filter(advertising_train,
is.finite(ln_req))
p_req <- ggplot(finite_req) +
geom_density(aes(x = ln_req),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_req$ln_req),
sd(finite_req$ln_req))) +
geom_vline(xintercept = mean(finite_cpc$ln_req),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
finite_y <- filter(advertising_train,
is.finite(ln_y))
p_y <- ggplot(finite_y) +
geom_density(aes(x = ln_y),
fill = "yellow", alpha = 1/3) +
stat_function(geom = "path", fun = dnorm,
n = 200, col = "red4", size = 1,
args = list(mean(finite_y$ln_y),
sd(finite_y$ln_y))) +
geom_vline(xintercept = mean(finite_cpc$ln_y),
col = "red4", size = 1) +
ylab("Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ln_vars_title <- textGrob("Logarithmic Transformed Features and Comparison to Normal Curve",
gp = gpar(fontface = "bold"))
grid.arrange(top = ln_vars_title,
p_cpc, p_ctr,
p_impr, p_req,
p_y,
layout_matrix = matrix(c(1,1,2,2,
3,3,4,4,
NA,5,5,NA),
ncol = 4,
byrow = T))
ggplot(advertising_train) +
geom_density(aes(x = ln_ctr, fill = companyId),
alpha = 1/3) +
labs(title = "Density Plots for Logarithmic Transformed \`ctr\`",
subtitle = "Grouped by \`companyId\`",
y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplot(advertising_train) +
geom_density(aes(x = ln_ctr, fill = companyId),
alpha = 1/3) +
facet_rep_wrap(~deviceType) +
labs(title = "Density Plots for Logarithmic Transformed \`ctr\` and each \`companyId\`",
subtitle = "Facetted by \`deviceType\`",
y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
ggplot(advertising_train) +
geom_density(aes(x = ln_cpc, fill = companyId),
alpha = 1/2) +
labs(title = "Density Plots of \`ln_cpc\`",
subtitle = "Grouped by \`companyId\`",
ylab = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplot(advertising_train) +
geom_density(aes(x = ln_cpc, fill = companyId),
alpha = 1/2) +
facet_rep_wrap(~deviceType) +
labs(title = "Density Plots of \`ln_cpc\` for each \`companyId\`",
subtitle = "Facetted by \`deviceType\`",
ylab = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "aliceblue",
colour = NA))
price_trans <- mutate(advertising_train,
"ln_price1" = log(price1),
"ln_price2" = log(price2),
"ln_price3" = log(price3))
p_price1_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price1, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
p_price2_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price2, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
p_price3_trans <- ggplot(price_trans) +
geom_density(aes(x = ln_price3, fill = deviceType),
alpha = 1/3) +
labs(y = "Density") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
price_vars_title <- textGrob("Logarithmic Transformed Price Features",
gp = gpar(fontface = "bold"))
grid.arrange(price_vars_title,
p_price1_trans, p_price2_trans,
p_price3_trans,
layout_matrix = matrix(c(1,
2,
2,
2,
3,
3,
3,
4,
4,
4),
ncol = 1,
byrow = T))
boxcox <- function(x, lambda = 1) {
(x^(lambda) - 1 /
(lambda))
}
box_grobs_2 <- list()
box_grobs_higher <- list()
for (i in 1:length(seq(0.025, 0.3, 0.025))) {
j <- seq(0.025, 0.3, 0.025)[i]
boxcox_price <- mutate(advertising_train,
"bc_price1" = boxcox(x = price1,
lambda = j),
"bc_price2" = boxcox(x = price2,
lambda = j),
"bc_price3" = boxcox(x = price3,
lambda = j))
bc_colnames <- colnames(boxcox_price)[str_detect(colnames(boxcox_price), "bc_price")]
for (k in bc_colnames) {
m <- which(bc_colnames %in% k)
box_grobs_2[[m]] <- ggplot(select(boxcox_price,
k, deviceType)) +
geom_density(aes(x = .data[[k]], fill = deviceType),
alpha = 1/3) +
labs(title = paste("Lambda = ", j)) +
ylab("Density") + xlab(k) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}
box_grobs_higher[[i]] <- box_grobs_2
}
density_by_lambda <- list()
for (i in 1:12) {
density_by_lambda[[i]] <-  do.call(what = grid.arrange,
args = list(grobs = box_grobs_higher[[i]],
nrow = 1))
}
do.call(what = grid.arrange,
args = list(grobs = density_by_lambda,
top = textGrob("Box-Cox Transformations for Each \`price\` Feature at Changing lamda Values",
gp = gpar(fontsize=16,
fontface = "bold")),
ncol = 1))
normalise <- function(x) {
x[is.infinite(x)] <- NA
(((x - min(x, na.rm = T)) /
(max(x, na.rm = T) - min(x, na.rm = T))) * (1 - 0) + 0)
}
num_feats <- select(advertising_train,
case_id,
which(sapply(advertising_train, class)=="numeric"))
for ( i in colnames(num_feats)) {
newfeat <- paste0("norm_", i)
advertising_train[[newfeat]] <- normalise(num_feats[[i]])
advertising_train[[newfeat]][is.na(advertising_train[[newfeat]])] <- advertising_train[[i]]
}
sample_adv <- sample_n(advertising_train, 20)
kable_styling(kable(sample_adv[, 1:floor(ncol(sample_adv)/3)],
caption = "Sample of advertising\\_train Data Frame with Normalised Numeric Features (1/3)",
format.args = list(digits = 2, scientific = F,
big.mark = ",")),
font_size = 8, latex_options = c("striped"),
full_width = T)
kable_styling(kable(sample_adv[, c(1,
seq(from = floor(ncol(sample_adv)/3)*1+1,
to = floor(ncol(sample_adv)/3)*2,
by = 1))],
caption = "Sample of advertising\\_train Data Frame with Normalised Numeric Features (2/3)",
format.args = list(digits = 2, scientific = F,
big.mark = ",")),
font_size = 8, latex_options = c("striped"),
full_width = T)
kable_styling(kable(sample_adv[, c(1,
seq(from = floor(ncol(sample_adv)/3)*2+1,
to = floor(ncol(sample_adv)/3)*3,
by = 1))],
caption = "Sample of advertising\\_train Data Frame with Normalised Numeric Features (3/3)",
format.args = list(digits = 2, scientific = F,
big.mark = ",")),
font_size = 8, latex_options = c("striped"),
full_width = T)
num_vars <- sapply(select(advertising_train,
-case_id), is.numeric)
num_vars <- num_vars[which(num_vars == T)]
adv_train_num_long <- gather(advertising_train,
names(num_vars),
key = "Variable",
value = "Value")
kable_styling(kable(summarise(group_by(adv_train_num_long,
Variable),
"n finite" = sum(is.finite(Value)),
"n infinite" = sum(is.infinite(Value)),
"n non-NA" = sum(!is.na(Value)),
"n NA" = sum(is.na(Value))),
format.args = list(big.mark = ","),
caption = "Counts of Infinite and NA Observations for each Feature"),
font_size = 8, latex_options = c("striped"),
full_width = F)
advertising_train <- mutate(advertising_train,
"norm_ln_y_binned" = as.factor((norm_ln_y %/% 0.2) + 1))
ggplot(advertising_train) +
geom_bar(aes(x = norm_ln_y_binned),
stat = "count", bins = 10,
fill = "cyan3", alpha = 1/2) +
stat_count(aes(x = norm_ln_y_binned,
label = comma(..count..)),
geom = "text",
vjust = -0.5) +
scale_x_discrete(limits = c(1:6),
"Normalised Logarithmic Target Feature (y) Bin") +
scale_y_continuous(labels = comma,
breaks = seq(from = 0,
to = 110000,
by = 25000),
"Count") +
ggtitle("Frequencies of Normalised and Natural Log Transformed Target Feature Bins") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank())
advertising_train_subset <- sample_n(advertising_train,
size = 1998,
replace = F)
advertising_train_subset <- rbind(advertising_train_subset,
filter(advertising_train,
norm_ln_y == max(norm_ln_y) |
norm_ln_y == min(norm_ln_y)))
factor_vars <- sapply(advertising_train_subset,
is.factor)
factor_vars <- names(factor_vars[which(factor_vars == T)])
advertising_train_transformed <- select(advertising_train_subset,
factor_vars,
contains("norm"),
-norm_ln_y,
-norm_y)
classif_task <- makeClassifTask(id = "target_binned",
data = advertising_train_transformed,
target = "norm_ln_y_binned")
filter_vals <- generateFilterValuesData(classif_task)
plotFilterValues(filter_vals) +
coord_flip()+
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "turquoise3",
fill = NA),
title = element_text(face = "bold"))
filtered_task <- filterFeatures(classif_task,
fval = filter_vals,
perc = 0.4)
lrn <- makeFilterWrapper(learner = "classif.kknn",
fw.method = "FSelector_chi.squared")
param_set <- makeParamSet(makeDiscreteParam("fw.perc",
values = seq(0.2,
0.5,
0.05)))
rdesc <- makeResampleDesc("CV", iters = 3)
res <- tuneParams(lrn,
task = classif_task,
resampling = rdesc,
par.set = param_set,
control = makeTuneControlGrid())
paste("The optimal percentage is:",
res$x )
paste("The misclassification error is:",
res$y)
random_Ctrl <- makeFeatSelControlRandom(maxit = 10L)
rdesc2 <- makeResampleDesc("CV", iters = 3)
sfeats <- selectFeatures(learner = "classif.kknn",
task = classif_task,
resampling = rdesc2,
control = random_Ctrl,
show.info = F)
sfeats$x
sfeats$y
fusedLrn_kknn <- makeFilterWrapper(learner = "classif.kknn",
fw.method = "FSelector_chi.squared",
fw.perc = res$x$fw.perc)
fused_Model_kknn <- mlr::train(fusedLrn_kknn,
classif_task)
prediction_fused_kknn <- predict(fused_Model_kknn,
newdata = advertising_train)
prediction_fused_kknn
performance(prediction_fused_kknn)
n_countryId <- length(levels(advertising_train$countryId))
advertising_train <- mutate(advertising_train,
countryId_bin =  as.factor((as.numeric(as.character(countryId)) %/% 10) +1 ))
sort(unique(advertising_train$countryId_bin))
advertising_train_subset <- sample_n(advertising_train,
size = 1900,
replace = F)
advertising_train_subset <- rbind(advertising_train_subset,
filter(advertising_train,
norm_ln_y == max(advertising_train$norm_ln_y,
na.rm = T) |
norm_ln_y == min(advertising_train$norm_ln_y,
na.rm = T)))
for (i in levels(advertising_train$countryId_bin)) {
temp <- filter(advertising_train,
countryId_bin == i)
advertising_train_subset <- rbind(advertising_train_subset,
sample_n(temp, size = 1))
}
advertising_train_subset <- select(advertising_train_subset,
-countryId)
factor_vars <- sapply(advertising_train_subset,
is.factor)
factor_vars <- names(factor_vars[which(factor_vars == T)])
advertising_train_transformed <- select(advertising_train_subset,
factor_vars,
contains("norm"),
-norm_ln_y,
-norm_y)
sample_adv <- sample_n(advertising_train_transformed,
20)
kable_styling(kable(sample_adv[ , 1:floor(ncol(sample_adv)/2)],
format.args = list(big.mark = ","),
caption = "Transformed Data Frame (1/2)"),
font_size = 8, latex_options = c("striped"),
full_width = F)
kable_styling(kable(sample_adv[ , ceiling(ncol(sample_adv)/2) : ncol(sample_adv)],
format.args = list(big.mark = ","),
caption = "Transformed Data Frame (2/2)"),
font_size = 8, latex_options = c("striped"),
full_width = F)
classif_task <- makeClassifTask(id = "target_binned",
data = advertising_train_transformed,
target = "norm_ln_y_binned")
rf_lrn <- makeLearner("classif.randomForest",
predict.type = "response",
fix.factors.prediction = T)
wrapped_lrn_rf <- makeBaggingWrapper(rf_lrn,
bw.iters = 10,
bw.feats = 0.2)
wrappedRf_model <- mlr::train(wrapped_lrn_rf,
classif_task)
wrappedRf_model
RF_prediction <- predict(wrappedRf_model,
newdata = advertising_train)
performance(RF_prediction)
fusedLrn_rf <- makeFilterWrapper(learner = "classif.randomForest",
fw.method = "FSelector_chi.squared",
fw.perc = res$x$fw.perc)
fused_Model_rf <- mlr::train(fusedLrn_rf,
classif_task)
prediction_fused_rf <- predict(fused_Model_rf,
newdata = advertising_train)
rpart_lrn <- makeLearner("classif.rpart", predict.type = 'response',
fix.factors.prediction = TRUE)
wrapped_lrn_rpart <- makeBaggingWrapper(rpart_lrn,
bw.iters = 10,
bw.feats = 0.2)
wrappedRpart_mod <- mlr::train(wrapped_lrn_rpart, classif_task)
wrappedRpart_mod
prediction_rpart <- predict(wrappedRpart_mod,
newdata = advertising_train)
head(prediction_rpart, 10)
performance(prediction_rpart)
fusedLrn_rpart <- makeFilterWrapper(learner = "classif.rpart",
fw.method = "FSelector_chi.squared",
fw.perc = res$x$fw.perc)
fused_Model_rpart <- mlr::train(fusedLrn_rf,
classif_task)
prediction_fused_rpart <- predict(fused_Model_rpart,
newdata = advertising_train)
head(prediction_fused_rpart)
performance(prediction_fused_rpart)
fused_Model_kknn2 <- mlr::train(fusedLrn_kknn,
classif_task)
prediction_fused_kknn2 <- predict(fused_Model_kknn,
newdata = advertising_train)
kable_styling(
kable(
t(tibble("KKNN on deprecated data frame" = performance(prediction_fused_kknn),
"KKNN on updated data frame" = performance(prediction_fused_kknn2),
"Decision Tree" = performance(prediction_fused_rpart),
"Random Forest" = performance(prediction_fused_rf))),
format.args = list(big.mark = ",",
digits = 4),
caption = "Mean Misclassification Error"),
font_size = 9, latex_options = c("striped"),
full_width = F
)
kable_styling(
kable(
calculateConfusionMatrix(prediction_fused_kknn,
sums = T)$result,
format.args = list(big.mark = ",",
digits = 4),
caption = paste("Confusion Matrix for",
quote(prediction_fused_kknn))),
font_size = 9, latex_options = c("striped"),
full_width = F
)
kable_styling(
kable(
calculateConfusionMatrix(prediction_fused_rpart,
sums = T)$result,
format.args = list(big.mark = ",",
digits = 4),
caption = paste("Confusion Matrix for",
quote(prediction_fused_rpart))),
font_size = 9, latex_options = c("striped"),
full_width = F
)
kable_styling(
kable(
calculateConfusionMatrix(prediction_fused_rf,
sums = T)$result,
format.args = list(big.mark = ",",
digits = 4),
caption = paste("Confusion Matrix for",
quote(prediction_fused_rf))),
font_size = 9, latex_options = c("striped"),
full_width = F
)
beep(8)
rm(list=ls())
gc()
