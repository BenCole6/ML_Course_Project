---
title:  |
| Predicting Revenue from
        | Google Advertising Data
        subtitle: |
        | MATH2319 - Machine Learning
        | Course Project
        author: "Ben Cole - s3412349"
date: "Print Date: `r format(Sys.Date(), '%d/%m/%Y')`"
output:
  pdf_document:
    toc: true
    toc_depth: 3
    number_sections: true
    latex_engine: xelatex
    fig_width: 10
    df_print: kable
urlcolor: blue
mainfont: Arial Nova
fontsize: 11pt
geometry: margin=15mm
---

\newpage

# **Phase 1 - Introduction, Cleaning, and Exploration**

## Outline

The prescribed data set contained advertising metrics provided by a prominent search engine. The data contained severald descriptive features pertaining to a range of information. Finally, the target feature was a measure of revenue associated with each of the observations.

### Nature of the Data

The below is an exerpt from accompanying documentation about the dataset.

Features in this data set are as follows:

*   companyId: Company ID of record (categorical)
*   countryId: Country ID of record (categorical)
*   deviceType: Device type of record (categorical corresponding to desktop, mobile,
tablet)
*   day: Day of record (integer between 1 (oldest) and 30 for train, 31 and 35 (most
recent) for test)
*   dow: Day of week of the record (categorical)
*   price1, price2, price3: Price combination for the record set by the company (numeric)
*   ad_area: area of advertisement (numeric)
*   ad_ratio: ratio of advertisement’s length to its width (numeric)
*   requests, impression, cpc, ctr, viewability: Various metrics related to the record
(numeric)
*   ratio1, …, ratio5: Ratio characteristics related to the record (numeric)
*   y (target feature): revenue-related metric (numeric)

```{r}



```

#### Target Feature

The column/variable **y** was selected as the target feature in the dataset.

#### Descriptive Features

All other columns/variables in the dataset, as outlined above, were chosen as descriptive features.

\newpage

## Data Processing

### Libraries

```{r}

library(pacman)                         ## for loading multiple packages

suppressMessages(p_load(character.only = T,
                        install = F,
                        c("tidyverse",  ## thanks Hadley
                          "lubridate",  ## for handling dates
                          "forcats",    ## for categorial variables, not for felines
                          "zoo",        ## some data cleaning capabilities
                          "lemon",      ## add ons for ggplot
                          "rvest",      ## scraping web pages
                          "knitr",      ## knitting to RMarkdown
                          "kableExtra", ## add ons for knitr tables
                          "scales",     ## quick and easy formatting prettynums
                          "grid",       ## for stacking ggplots
                          "gridExtra",  ## also for stacking ggplots
                          "e1071",      ## for skew and kurtosis
                          "janitor",    ## cleaning colnames
                          "beepr")))    ## plays a beep tone

```

\newpage

### Loading Data

```{r}

advertising_train <- read_csv("advertising_train.csv")

sample_adv <- sample_n(advertising_train, 20)

kable_styling(kable(sample_adv[ , 1:(ncol(sample_adv)/2)],
                    caption = "Sample of Advertising Data Frame"),
              font_size = 8.5, latex_options = c("striped"),
              full_width = F)

kable_styling(kable(sample_adv[ , c(1, ((ncol(sample_adv)/2)+1):ncol(sample_adv))],
                    caption = "Sample of Advertising Data Frame (cont)"),
              font_size = 8.5, latex_options = c("striped"),
              full_width = F)

```

### Classifying Data

Per the above feature definitions, the data was classified.

```{r}

advertising_train$companyId <- as.factor(advertising_train$companyId)

advertising_train$countryId <- as.factor(advertising_train$countryId)

advertising_train$deviceType <- as.factor(advertising_train$deviceType)

advertising_train$dow <- as.factor(advertising_train$dow)

sapply(advertising_train, class)

```

### Descriptive Statistics

#### Numeric Variables

```{r}

advertising_train_long_num <- select(advertising_train,
                                     colnames(advertising_train),
                                     -case_id, -countryId,
                                     -companyId, -deviceType,
                                     -dow)

advertising_train_long_num <- gather(advertising_train_long_num,
                                     key = "Variable",
                                     value = "Value")

summary_adv_num <- summarise(group_by(advertising_train_long_num,
                                      Variable),
                             "Mean" = mean(Value, na.rm = T),
                             "Std Dev" = sd(Value, na.rm = T),
                             "Min" = min(Value, na.rm = T),
                             "Q1" = quantile(Value, 0.25, na.rm = T),
                             "Median" = median(Value, na.rm = T),
                             "Q3" = quantile(Value, 0.75, na.rm = T),
                             "Max" = max(Value, na.rm = T),
                             "Number of NA" = sum(is.na(Value)))

kable_styling(kable(summary_adv_num,
                    digits = 3, format.args = list(nsmall = 3,
                                                   scientific = F,
                                                   big.mark = ","),
                    caption = "Summary Statistics of Numeric Variables"),
              font_size = 8.5, latex_options = c("striped"),
              full_width = F)

```

#### Categorical and Non-Numeric Variables

```{r, fig.width=10, fig.height=8}

advertising_train_long_cat <- select(advertising_train,
                                     countryId,
                                     companyId, deviceType,
                                     dow)

advertising_train_long_cat <- gather(advertising_train_long_cat,
                                     key = "Variable",
                                     value = "Value")

advertising_train_long_cat$Variable <- as.factor(advertising_train_long_cat$Variable)

advertising_train_long_cat$Value <- as.factor(advertising_train_long_cat$Value)

ggplot(advertising_train_long_cat) +
  geom_bar(aes(x = fct_infreq(Value),
               fill = Variable),
           show.legend = F, alpha = 2/3) +
  facet_rep_wrap(~Variable,
                 repeat.tick.labels = T,
                 scales = "free") +
  scale_y_continuous(labels = comma,
                     expand = c(0.01, 0),
                     "Count") +
  scale_x_discrete("Factor Value") +
  scale_fill_manual(values = c("blue4", "red3", "cyan3", "yellow3")) +
  labs(title = "Frequencies of each Value for each Categorical Variable") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        strip.background = element_rect(fill = "aliceblue",
                                        colour = NA))

```


```{r, fig.width=10, fig.height=6}

country_labels <- levels(fct_infreq(advertising_train$countryId))[c(seq(1,
                                                                        length(levels(fct_infreq(advertising_train$countryId))),
                                                                        ceiling(length(levels(fct_infreq(advertising_train$countryId)))/10)))]

ggplot(advertising_train) +
  geom_bar(aes(x = fct_infreq(countryId)),
           fill = "red3", alpha = 2/3) +
  scale_y_continuous(labels = comma,
                     expand = c(0.01, 0),
                     "Count") +
  scale_x_discrete(breaks = country_labels,
                   "countryId") +
  labs(title = "Frequency of observations for each countryId",
       subtitle = "(a categorical variable)",
       caption = "labels along x-axis are ID numbers and not numeric/double/ordinal/etc") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())


```

\newpage

### Density Plots

#### Numeric Variables

```{r, fig.height=12, fig.width=10}

ggplot(advertising_train_long_num) +
  geom_density(aes(x = Value),
               fill = "yellow",
               alpha = 1/3) +
  facet_rep_wrap(~Variable,
                 repeat.tick.labels = T,
                 scales = "free",
                 ncol = 3) +
  scale_y_continuous(labels = comma_format(accuracy = 0.1)) +
  labs(title = "Density Plots of each Numeric Variable",
       x = "Variable",
       y = "Density")+
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        strip.background = element_rect(fill = "aliceblue",
                                        colour = NA))

ggplot(advertising_train_long_num) +
  geom_density(aes(x = log(Value)),
               fill = "yellow",
               alpha = 1/3) +
  facet_rep_wrap(~Variable,
                 repeat.tick.labels = T,
                 scales = "free",
                 ncol = 3) +
  scale_y_continuous(labels = comma_format(accuracy = 0.1)) +
  labs(title = "Density Plots of each Numeric Variable",
       subtitle = "After applying natural logarithmic transformation",
       x = "ln of Variable",
       y = "Density") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        strip.background = element_rect(fill = "aliceblue",
                                        colour = NA))

```


#### Logarithmic Transformations

It was observed from the plots above that natural logarithmic transformations were applicable for descriptive features `cpc`, `impression`, and potentially `ctr`. Target feature `y` was also suitable for a logarithmic transformation.    


```{r}

advertising_train <- mutate(advertising_train,
                            "ln_cpc" = log(cpc),
                            "ln_ctr" = log(ctr),
                            "ln_impr" = log(impression),
                            "ln_y" = log(y))

```



```{r, fig.height=10, fig.width=12}

finite_cpc <- filter(advertising_train,
                     is.finite(ln_cpc))

p_cpc <- ggplot(finite_cpc) +
  geom_density(aes(x = ln_cpc),
               fill = "yellow", alpha = 1/3) +
  stat_function(geom = "path", fun = dnorm,
                n = 200, col = "red", size = 1,
                args = list(mean(finite_cpc$ln_cpc),
                            sd(finite_cpc$ln_cpc))) +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

finite_ctr <- filter(advertising_train,
                     is.finite(ln_ctr))

p_ctr <- ggplot(finite_ctr) +
  geom_density(aes(x = ln_ctr),
               fill = "yellow", alpha = 1/3) +
  stat_function(geom = "path", fun = dnorm,
                n = 200, col = "red", size = 1,
                args = list(mean(finite_ctr$ln_ctr),
                            sd(finite_ctr$ln_ctr))) +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

finite_impr <- filter(advertising_train,
                      is.finite(ln_impr))

p_impr <- ggplot(finite_impr) +
  geom_density(aes(x = ln_impr),
               fill = "yellow", alpha = 1/3) +
  stat_function(geom = "path", fun = dnorm,
                n = 200, col = "red", size = 1,
                args = list(mean(finite_impr$ln_impr),
                            sd(finite_impr$ln_impr))) +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

finite_y <- filter(advertising_train,
                   is.finite(ln_y))

p_y <- ggplot(finite_y) +
  geom_density(aes(x = ln_y),
               fill = "yellow", alpha = 1/3) +
  stat_function(geom = "path", fun = dnorm,
                n = 200,
                args = list(mean(finite_y$ln_y),
                            sd(finite_y$ln_y))) +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

ln_vars_title <- textGrob("Logarithmic Transformed Features and Comparison to Normal Curve",
                          gp = gpar(fontface = "bold"))


grid.arrange(ln_vars_title,
             p_cpc, p_ctr,
             p_impr, p_y,
             layout_matrix = matrix(c(1,1,
                                      2,3,
                                      2,3,
                                      2,3,
                                      2,3,
                                      4,5,
                                      4,5,
                                      4,5,
                                      4,5),
                                    ncol = 2,
                                    byrow = T))

```

```{r, fig.width=9, fig.height=7}

ggplot(advertising_train) +
  geom_density(aes(x = ln_ctr, fill = companyId),
               alpha = 1/3) +
  labs(title = "Density Plots for Logarithmic Transformed \`ctr\`",
       subtitle = "Grouped by \`companyId\`",
       y = "Density") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())


```


```{r, fig.height=10, fig.width=12}

ggplot(advertising_train) +
  geom_density(aes(x = ln_ctr, fill = companyId),
               alpha = 1/3) +
  facet_rep_wrap(~deviceType) +
  labs(title = "Density Plots for Logarithmic Transformed \`ctr\` and each companyId",
       subtitle = "Facetted by \`deviceType\`",
       y = "Density") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        strip.background = element_rect(fill = "aliceblue",
                                        colour = NA))

```

```{r, fig.width=8, fig.height=9}

price_trans <- mutate(advertising_train,
                      "ln_price1" = log(price1),
                      "ln_price2" = log(price2),
                      "ln_price3" = log(price3))

p_price1_trans <- ggplot(price_trans) +
  geom_density(aes(x = ln_price1, fill = deviceType),
               alpha = 1/3) +
  labs(y = "Density") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

p_price2_trans <- ggplot(price_trans) +
  geom_density(aes(x = ln_price2, fill = deviceType),
               alpha = 1/3) +
  labs(y = "Density") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

p_price3_trans <- ggplot(price_trans) +
  geom_density(aes(x = ln_price3, fill = deviceType),
               alpha = 1/3) +
  labs(y = "Density") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())


price_vars_title <- textGrob("Logarithmic Transformed Price Features",
                             gp = gpar(fontface = "bold"))

grid.arrange(price_vars_title,
             p_price1_trans, p_price2_trans,
             p_price3_trans,
             layout_matrix = matrix(c(1,
                                      2,
                                      2,
                                      2,
                                      3,
                                      3,
                                      3,
                                      4,
                                      4,
                                      4),
                                    ncol = 1,
                                    byrow = T))

```


```{r, fig.width=12, fig.height=11}

boxcox <- function (x, lambda = 1) {
  
  (x^(lambda) - 1) /
  (lambda)
  
}

box_grobs <- list()

for (i in 1:length(seq(0.025, 0.3, 0.025))) {
  
  j <- seq(0.025, 0.3, 0.025)[i]
  
  boxcox_price <- mutate(advertising_train,
                         "bc_price1" = boxcox(x = price1,
                                              lambda = j),
                         "bc_price2" = boxcox(x = price2,
                                              lambda = j),
                         "bc_price3" = boxcox(x = price3,
                                              lambda = j))
  
  box_grobs[[i]] <- ggplot(boxcox_price) +
    geom_density(aes(x = bc_price1, fill = deviceType),
                 alpha = 1/3) +
    ggtitle(paste("Lambda = ", j)) +
    theme_minimal() +
    theme(panel.grid.major.x = element_blank(),
          panel.grid.minor.x = element_blank())
  
}

box_grobs_title <- textGrob("Box Cox Transformations of \`price1\` at differing lambda values",
                            gp = gpar(fontface = "bold"))


box_grobs_arrange <- do.call(grid.arrange,
                             box_grobs)

grid.arrange(box_grobs_title,
             box_grobs_arrange,
             layout_matrix = matrix(c(1,2,2,2,2,2,2,
                                      2,2,2,2,2,2,
                                      2,2,2,2,2,2),
                                    byrow = T))


```


```{r}

ggplot(advertising_train) +
  geom_density(aes(x = ln_cpc, fill = companyId),
               alpha = 1/2) +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

ggplot(advertising_train) +
  geom_density(aes(x = ln_cpc, fill = companyId),
               alpha = 1/2) +
  facet_rep_wrap(~deviceType) +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        strip.background = element_rect(fill = "aliceblue",
                                        colour = NA))

```


```{r}



```


\newpage 

## References

