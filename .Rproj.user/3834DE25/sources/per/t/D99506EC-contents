---
title:  |
        | Predicting Skaters' Plus Minus
        | Using Key Statistics
subtitle: |
          | MATH2319 - Machine Learning
          | Course Project
author: "Ben Cole - s3412349"
date: "Print Date: `r format(Sys.Date(), '%d/%m/%Y')`"
output:
  pdf_document:
    toc: true
    toc_depth: 3
    number_sections: true
    latex_engine: xelatex
    fig_width: 10
    df_print: kable
urlcolor: blue
mainfont: Arial Nova
fontsize: 11pt
geometry: margin=15mm
---

\newpage

# **Phase 1 - Introduction, Cleaning, and Exploration**

## Outline

Sports statistics is an area where many data points are collected that contribute to a wide range of statistics. Primarily, two main objectives arise for the use of these statistics; to either predict a result of a given match or to quantify the performance of a given participant. One such sport where a large amount of data is collected is the National Hockey League (here on **NHL**) in North America. Game statistics are collected for both skaters and goaltenders for a range of performance indicators ranging from hits/body checks to face-off wins to short-handed goals for and against. However, not all of these statistics are easily compared across players from differing positions. Comparing goals blocked between a defensemen and a left wing is unfair, whilst comparing penalty minutes may be a more accurate comparison to see which skaters are costing the team. Points are simply a tally of the goals and assists generated by a skater, and so may be weighted towards the attacking lines. As such, it would seem that Plus/Minus (or **+/-**) is one of the simplest ways to compare all skaters, regardless of their playing position.    

Plus/Minus is an overall measure of the number of goals scored by a skater's team they are on the ice minus the number of goals scored against the skater's team while they are on the ice. The formula used to calculate Plus/Minus for a given skater is given by:

$$ PM_s = \sum_{s=1}^{t}{(GF_{t,s} - GA_{t,s})} $$
Where $s =$ given skater, $t =$ team in which skater $s$ played, $GF =$ goals for team $t$ while skater $s$ was on the ice, and $GA =$ goals against team $t$ while skater $s$ was on the ice.

### Nature of the Data

Data was source from the website [**Inalitic**](http://inalitic.com/datasets/nhl%20player%20data.html). Two files are available for download from Inalitic; an MS Excel file containing several tables across several spreadsheets, and one comma separated values file that contains statistics on a large number of skaters. The latter file was the only file downloaded and used from Inalitic.  

The .csv file contained a large number of statistics on NHL players between the years 1940 - 2018 inclusive. The file contained only *skaters* and did not include *goaltenders*. As such, the data table was an exhaustive list of every NHL player to whom a Plus/Minus statistic was appropriate to apply between the above years.

Below is a brief description of each of the variables included in the data table, as provided by the Inalitic website:

```{r}
library(pacman)

suppressWarnings(p_load(c("knitr",
                          "kableExtra",
                          "rvest",
                          "xml2"),
                        character.only = T))

Inalitic <- read_html("http://inalitic.com/datasets/nhl%20player%20data.html")

Variables <- as.data.frame(html_table(html_nodes(Inalitic, "table")[4],
                                      fill = T, trim = T))

colnames(Variables) <- Variables[1, ]
Variables <- Variables[2:nrow(Variables), ]

column_spec(kable_styling(kable(Variables, row.names = F,
                    caption = "Variable descriptions as provided by Inalitic"),
              latex_options = "striped", full_width = F, font_size = 9),
            4, width = "12.5cm")

```

#### Target Feature

Plus Minus was selected as the target feature in the data set.

#### Descriptive Features

All other variables in the data set were chosen as descriptive features, with the exemption of `Season` and `Player`.

\newpage

## Data Processing

### Libraries

```{r}

library(pacman)                         ## for loading multiple packages

suppressMessages(p_load(character.only = T,
                        install = F,
                        c("tidyverse",  ## thanks Hadley
                          "lubridate",  ## for handling dates
                          "forcats",    ## for categorial variables, not for felines
                          "zoo",        ## some data cleaning capabilities
                          "lemon",      ## add ons for ggplot
                          "rvest",      ## scraping web pages
                          "knitr",      ## knitting to RMarkdown
                          "kableExtra", ## add ons for knitr tables
                          "scales",     ## quick and easy formatting prettynums
                          "grid",       ## for stacking ggplots
                          "gridExtra",  ## also for stacking ggplots
                          "e1071",      ## for skew and kurtosis
                          "janitor",    ## cleaning colnames
                          "beepr")))    ## plays a beep tone

```

\newpage

### Loading Data

```{r}

Skater_Stats <- read_csv(file.path(getwd(),
                                   "skater_stats.csv"),
                         na = c("NA","na", "N/A", "n/a", "-", ""))

Skater_Stats <- rename(Skater_Stats,
                       "PM" = `+/-`)

Skater_Stats <- clean_names(Skater_Stats,
                            "parsed")

Skater_Stats <- select(Skater_Stats,
                       -X1)

Skater_Stats[, c(7:length(colnames(Skater_Stats)))] <- mutate_all(Skater_Stats[, c(7:length(colnames(Skater_Stats)))],
                                                                  as.double)

```

The data set provided by Inalitic was, so little data preprocessing was needed. The variables `S_percent` and `FO_percent` were expressed as numbers between 0 and 100, so these columns were modified to be a value between 0 and 1.

```{r}

Skater_Stats[ , c("S_percent", "FO_percent")] <- Skater_Stats[ , c("S_percent", "FO_percent")]/100

Skater_Sample <- sample_n(Skater_Stats, 20)

kable_styling(kable(Skater_Sample[ , c(1:15)],
                    caption = "Sample of `Skater\\_Stats` data frame"),
              latex_options = c("striped"), font_size = 9)

kable_styling(kable(Skater_Sample[ , c(1:2, 16:28)],
                    caption = "Sample of `Skater\\_Stats` data frame continued"),
              latex_options = c("striped"), font_size = 9)

```


\pagebreak

### Descriptive Statistics

#### Target Feature

```{r}

kable_styling(kable(t(summarise(Skater_Stats,
                                "Mean PM" = mean(PM, na.rm = T),
                                "Std Dev PM" = sd(PM, na.rm = T),
                                "Min PM" = min(PM, na.rm = T),
                                "Q1 PM" = quantile(PM, 0.25, na.rm = T),
                                "Median PM" = median(PM, na.rm = T),
                                "Q3 PM" = quantile(PM, 0.75, na.rm = T),
                                "Max PM" = max(PM, na.rm = T))),
                    caption = "Descriptive Statistics for Target Feature PM
                               (Plus/Minus)",
                    digits = 3,
                    format.args = list(nsmall = 2, scientific = F)),
              latex_options = "striped", font_size = 10, position = "center")

Skater_Stats_Long <- gather(Skater_Stats,
                            c(Age, GP:PTS, PIM:FO_percent),
                            key = "Variable",
                            value = "Statistic")

kable_styling(kable(summarise(group_by(Skater_Stats_Long,
                                       Variable),
                              "Mean" = mean(Statistic, na.rm = T),
                              "Std Dev" = sd(Statistic, na.rm = T),
                              "Min" = min(Statistic, na.rm = T),
                              "Q1" = quantile(Statistic, 0.25, na.rm = T),
                              "Median" = median(Statistic, na.rm = T),
                              "Q3" = quantile(Statistic, 0.75, na.rm = T),
                              "Max" = max(Statistic, na.rm = T)),
                    digits = 2,
                    format.args = list(scientific = F, big.mark = ",", nsmall = 2),
                    caption = "Descriptive Statistics for all numeric descriptive
                               features"),
              latex_options = "striped", font_size = 9, full_width = F)
          

```

\newpage

### Density Plots

#### Numeric Variables

```{r, fig.height=10}

ggplot(Skater_Stats_Long) +
  geom_density(aes(x = Statistic), na.rm = T,
               fill = "yellow", alpha = 0.2) +
  facet_rep_wrap(~Variable, scales = "free") +
  scale_x_continuous(labels = comma) +
  labs(title = "Density plots of each numeric variable") +
  theme_minimal()

```

#### Qualitative Variables

```{r fig.height=6}

ggplot(Skater_Stats) +
  geom_bar(aes(x = fct_infreq(Tm)),
           fill = "turquoise", alpha = 2/3) +
  scale_y_continuous(labels = comma,
                     "Frequency",
                   expand = expand_scale(c(0,0))) +
  scale_x_discrete("Team") +
  labs("Frequencies of each Team") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.border = element_blank(),
        text = element_text(size = 8))

ggplot(Skater_Stats) +
  geom_bar(aes(x = fct_infreq(Pos)),
           fill = "turquoise", alpha = 2/3) +
  scale_y_continuous(labels = comma,
                     "Frequency",
                   expand = expand_scale(c(0,0))) +
  scale_x_discrete("Position") +
  labs("Frequencies of each Skating Position") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.border = element_blank(),
        text = element_text(size = 9))

```

The most frequently occurring team code, `TOT` stands for season total. This is used when a player trades teams within a season.

```{r}

arrange(summarise(group_by(Skater_Stats,
                   Tm),
          "First Season in Data Set" = min(Season)),
        `First Season in Data Set`)

```



### Autocorrelation of Doubles

```{r, eval = F, fig.height=9, fig.width=10}

Skater_double <- Skater_Stats[, c(3, 6:length(colnames(Skater_Stats)))]

for (i in colnames(Skater_double)) {
  
  print(acf(Skater_double,
            na.action = na.pass,
            lag.max = nrow(Skater_double),
            main = colnames(Skater_double[, i]),
            ylab = "Autocorrelation",
            xlab = "Lag Position"))
  
}

```

\newpage 

## References

* <http://inalitic.com/datasets/nhl%20player%20data.html>